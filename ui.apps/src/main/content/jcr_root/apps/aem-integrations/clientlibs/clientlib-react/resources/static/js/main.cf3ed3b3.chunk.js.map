{"version":3,"sources":["utils/MetaUtils.ts","components/button/v1/index.tsx","components/helloworld/v1/index.tsx"],"names":["MetaUtils","window","e","getMetaPropertyValue","this","getWcmMode","propertyName","isBrowser","meta","document","head","querySelector","content","ButtonModel","isInEditor","hidePlaceHolder","DOMModel","byAttrVal","ReactButton","event","console","log","props","handleOnClick","Component","ButtonCustomElement","createCustomElement","customElements","define","HelloWorldModel","byJsonAttrVal","HelloWorldComponent","className","title","text","length","message","updateapi","users","map","user","lastname","firstname"],"mappings":"qQAAqBA,E,8FAQjB,WACI,IACI,MAAyB,qBAAXC,OAChB,MAAOC,GACL,OAAO,K,wBAIf,WACI,OAAOF,EAAUG,qBAAqB,gB,wBAG1C,WACI,MAA6B,SAAtBC,KAAKC,e,kCAShB,SAA4BC,GACxB,GAAIF,KAAKG,YAAa,CAClB,IAAMC,EAAOC,SAASC,KAAKC,cAAc,kBAAoBL,EAAe,MAE5E,OAAOE,GAAQA,EAAKI,a,YC1B1BC,G,oUAIJC,WAAad,EAAUc,a,EACvBC,iBAAkB,E,yBALMC,Y,kCACvBC,a,gGACAA,a,gGACAA,a,iEAKGC,E,mKAEJ,SAAcC,GACZC,QAAQC,IAAI,QAASF,K,oBAGvB,WAIE,OAEI,cAAC,IAAD,2BAAcf,KAAKkB,OAAnB,IACUC,cAAenB,KAAKmB,qB,GAbZC,aAkBpBC,EAAsBC,8BAAoBR,EAAaL,EAAa,WAE1EZ,OAAO0B,eAAeC,OAAO,aAAcH,G,IC7BrCI,G,EACHZ,sB,EACAA,sB,EACAA,sB,EACAA,sB,EACAa,0B,4ZACDhB,WAAad,EAAUc,a,EACvBC,iBAAkB,E,yBAPUC,Y,8GACC,M,6GACD,M,gHACG,M,kHACE,M,8GACK,M,GAKlCe,E,4JACJ,WAAU,IAAD,QAEP,OAEI,sBAAKC,UAAU,iBAAiB,cAAY,aAA5C,UACE,oBAAIA,UAAU,wBAAd,SAAuC5B,KAAKkB,MAAMW,SAEjD,UAAA7B,KAAKkB,aAAL,eAAYY,KAAKC,QAAS,GACvB,qCACE,mBAAGH,UAAU,6BAAb,4BACA,qBAAKA,UAAU,8BACV,2BAAyB,WAD9B,SAC0C5B,KAAKkB,MAAMY,WAI1D,UAAA9B,KAAKkB,aAAL,eAAYc,QAAQD,QAAS,GAC1B,qCACE,mBAAGH,UAAU,6BAAb,4BACA,qBAAKA,UAAU,8BACV,2BAAyB,QAD9B,SACuC5B,KAAKkB,MAAMc,cAIvD,UAAAhC,KAAKkB,aAAL,eAAYe,UAAUF,QAAS,GAC5B,qCACE,mBAAGH,UAAU,6BAAb,yBACA,qBAAKA,UAAU,8BACV,2BAAyB,QAD9B,SACuC5B,KAAKkB,MAAMe,gBAIvD,UAAAjC,KAAKkB,aAAL,eAAYgB,MAAMH,QAAS,GACxB,qCACE,mBAAGH,UAAU,6BAAb,oBACA,6BACG5B,KAAKkB,MAAMgB,MAAMC,KAAI,SAAAC,GAAI,OAAK,+BAAKA,EAAKC,SAAV,IAAqBD,EAAKE,4B,GApCzClB,aA6C5BC,EAAsBC,8BAAoBK,EAAqBF,EAAiB,WAEtF5B,OAAO0B,eAAeC,OAAO,iBAAkBH,K","file":"static/js/main.cf3ed3b3.chunk.js","sourcesContent":["export default class MetaUtils {\n\n    /**\n     * Returns if the code executes in the browser context or not by checking for the\n     * existance of the window object\n     *\n     * @returns {Boolean} the result of the check of the existance of the window object\n     */\n    static isBrowser(): boolean {\n        try {\n            return typeof window !== 'undefined';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static getWcmMode(): string {\n        return MetaUtils.getMetaPropertyValue('cq:wcmmode');\n    }\n\n    static isInEditor(): boolean {\n        return this.getWcmMode() === 'edit';\n    }\n\n    /**\n     * Returns the value of the meta property with the given key\n     *\n     * @param {string} propertyName  - name of the meta property\n     * @return {string|undefined}\n     */\n    static getMetaPropertyValue(propertyName: string): any {\n        if (this.isBrowser()) {\n            const meta = document.head.querySelector('meta[property=\"' + propertyName + '\"]');\n            // @ts-ignore\n            return meta && meta.content;\n        }\n    }\n\n}","import React, {Component, MouseEvent} from 'react';\nimport ButtonV1, {\n  ButtonV1Model\n} from \"@adobe/aem-core-components-react-base/dist/authoring/button/v1/ButtonV1\";\n// @ts-ignore\nimport {byAttrVal, createCustomElement, DOMModel} from \"@adobe/react-webcomponent\";\nimport MetaUtils from '../../../utils/MetaUtils';\n\nclass ButtonModel extends DOMModel implements ButtonV1Model{\n  @byAttrVal text?: string;\n  @byAttrVal link?: string;\n  @byAttrVal icon?: string;\n  isInEditor = MetaUtils.isInEditor();\n  hidePlaceHolder = false;\n}\n\nclass ReactButton extends Component<ButtonModel> {\n\n  handleOnClick(event:MouseEvent){\n    console.log(\"event\", event);\n  }\n\n  render() {\n\n    //const ButtonV1 = withAsyncImport(() => import(/* webpackChunkName: \"ButtonV1\" */ '@adobe/aem-core-components-react-base/dist/authoring/button/v1/ButtonV1'));\n\n    return (\n\n        <ButtonV1 {...this.props}\n                  handleOnClick={this.handleOnClick}\n        />\n    )\n  }\n}\nconst ButtonCustomElement = createCustomElement(ReactButton, ButtonModel, \"element\");\n// @ts-ignore\nwindow.customElements.define(\"aem-button\", ButtonCustomElement);","import React, {Component} from 'react';\n\n// @ts-ignore\nimport {byAttrVal, byJsonAttrVal, createCustomElement, DOMModel} from \"@adobe/react-webcomponent\";\nimport MetaUtils from '../../../utils/MetaUtils';\nimport {User} from './User';\n\nclass HelloWorldModel extends DOMModel {\n  @byAttrVal() title: string = '';\n  @byAttrVal() text: string = '';\n  @byAttrVal() message: string = '';\n  @byAttrVal() updateapi: string = '';\n  @byJsonAttrVal() users: Array<User> = [];\n  isInEditor = MetaUtils.isInEditor();\n  hidePlaceHolder = false;\n}\n\nclass HelloWorldComponent extends Component<HelloWorldModel> {\n  render() {\n\n    return (\n\n        <div className='cmp-helloworld' data-cmp-is='helloworld'>\n          <h2 className='cmp-helloworld__title'>{this.props.title}</h2>\n\n          {this.props?.text.length > 0 &&\n              <>\n                <p className='cmp-helloworld__item-label'>Text property:</p>\n                <pre className='cmp-helloworld__item-output'\n                     data-cmp-hook-helloworld='property'>{this.props.text}</pre>\n              </>\n          }\n\n          {this.props?.message.length > 0 &&\n              <>\n                <p className='cmp-helloworld__item-label'>Model message:</p>\n                <pre className='cmp-helloworld__item-output'\n                     data-cmp-hook-helloworld='model'>{this.props.message}</pre>\n              </>\n          }\n\n          {this.props?.updateapi.length > 0 &&\n              <>\n                <p className='cmp-helloworld__item-label'>Update API:</p>\n                <pre className='cmp-helloworld__item-output'\n                     data-cmp-hook-helloworld='model'>{this.props.updateapi}</pre>\n              </>\n          }\n\n          {this.props?.users.length > 0 &&\n              <>\n                <p className=\"cmp-helloworld__item-label\">Users:</p>\n                <ul>\n                  {this.props.users.map(user => (<li>{user.lastname} {user.firstname}</li>))}\n                </ul>\n              </>\n          }\n        </div>\n    )\n  }\n}\n\nconst ButtonCustomElement = createCustomElement(HelloWorldComponent, HelloWorldModel, 'element');\n// @ts-ignore\nwindow.customElements.define('aem-helloworld', ButtonCustomElement);"],"sourceRoot":""}